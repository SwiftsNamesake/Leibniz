
==================== FINAL INTERFACE ====================
2017-05-11 21:05:17.3477149 UTC

interface Leibniz-0.1.0.0-DW2L1DprBeSKynMxEzKTO7:Leibniz.Trigonometry 8001
  interface hash: 6001673e7bb934ce0fea1df387977f58
  ABI hash: 538b3ee037a0416caefd791cc5beb200
  export-list hash: a03cf232c63d8c403a4244343493faec
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5b70116131bee006003f8cde504ef3d4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Leibniz.Trigonometry.deg
  Leibniz.Trigonometry.rad
module dependencies: Leibniz.Constants
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  Leibniz.Constants 8c5ea30d6c9648b82b0b5435af34d6b6
  exports: dc0bbd9fdc5691eeaf96e02410df3a15
  Ï€ 3f0b0caa5f12c0d3c21f1d058d5f803c
import  -/  base-4.9.0.0:GHC.Float a46e197015eefaa013d7004e58481c54
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
7833aa8f6ae58116256ee8c3af6cda2a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Leibniz.Trigonometry.$trModule2
                   Leibniz.Trigonometry.$trModule1) -}
9b854bbc27fdca48b37b90293554949a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Leibniz.Trigonometry"#) -}
0ad0ed4c6ed6954d0939eba0eee2f83f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Leibniz-0.1.0.0-DW2L1DprBeSKynMxEzKTO7"#) -}
cf5ce6a161bddb38ed7921d986bd6a5f
  deg :: GHC.Float.Floating f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f
                   ($dFloating :: GHC.Float.Floating f)
                   (eta :: f) ->
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num f = GHC.Real.$p1Fractional @ f $dFractional
                 } in
                 GHC.Num.*
                   @ f
                   $dNum
                   eta
                   (GHC.Num.*
                      @ f
                      $dNum
                      (GHC.Num.fromInteger @ f $dNum Leibniz.Trigonometry.deg1)
                      (GHC.Real.recip
                         @ f
                         $dFractional
                         (GHC.Float.pi @ f $dFloating)))) -}
5fa1e04b9a0bd9b778fa2b077b083921
  deg1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (180) -}
646c7de2ec81568c03de745f739fbe71
  rad :: GHC.Float.Floating f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLL),U(1*U,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f
                   ($dFloating :: GHC.Float.Floating f)
                   (eta :: f) ->
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num f = GHC.Real.$p1Fractional @ f $dFractional
                 } in
                 GHC.Num.*
                   @ f
                   $dNum
                   eta
                   (GHC.Num.*
                      @ f
                      $dNum
                      (GHC.Float.pi @ f $dFloating)
                      (GHC.Real.recip
                         @ f
                         $dFractional
                         (GHC.Num.fromInteger @ f $dNum Leibniz.Trigonometry.deg1)))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

