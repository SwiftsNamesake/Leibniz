
==================== FINAL INTERFACE ====================
2016-09-02 17:52:33.2569602 UTC

interface Leibn_4HbkS7GG3563vKXzubBV4Y:Leibniz.Trigonometry 7103
  interface hash: b041a13e652261692102b7e69e4fd215
  ABI hash: 14b833bf0de72bae0dbf272dc615a8ff
  export-list hash: 634a1e7ca8b240c9e9da0a0a86132aba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 54223dca4b1657f69700e52c751282e9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Leibniz.Trigonometry.todeg
  Leibniz.Trigonometry.torad
module dependencies: Leibniz.Constants
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Leibniz.Constants d24754b80131d662b8c777f742b9cd08
  exports: 98098f3bea7ef6de66776abca2bb3ca3
  Ï€ 913cb442458494f650b15147318c55a9
import  -/  base-4.8.2.0:GHC.Float e775768193fb99931685c3d71fe8a28b
import  -/  base-4.8.2.0:GHC.Num 099c29dfc2c0e3c154d011e91b663293
import  -/  base-4.8.2.0:GHC.Real da292570a9ba3b498203d266364d0cfe
import  -/  base-4.8.2.0:Prelude 0f9dd1bcfa413fa55bb6dca444292bf6
371c3074ed3f69119cbbd5f260f0806f
  todeg :: GHC.Float.RealFloat f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f $dRealFloat :: GHC.Float.RealFloat f eta :: f ->
                 let {
                   $dFloating :: GHC.Float.Floating f
                   = GHC.Float.$p2RealFloat @ f $dRealFloat
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 GHC.Num.*
                   @ f
                   (GHC.Real.$p1Fractional @ f $dFractional)
                   eta
                   (GHC.Real./
                      @ f
                      $dFractional
                      (GHC.Real.fromRational
                         @ f
                         $dFractional
                         Leibniz.Trigonometry.todeg1)
                      (GHC.Float.pi @ f $dFloating))) -}
cbd930def5ae30e19d65a3c8440edee5
  todeg1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Leibniz.Trigonometry.todeg3
                   Leibniz.Trigonometry.todeg2) -}
bc0b26dd0a18be2e3ec949fec70582f8
  todeg2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
0f0c863d6a1ffbf5f3f067c9d7aad865
  todeg3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 180) -}
eb3bbd7bda41485268da7aa8c1d52a92
  torad :: GHC.Float.RealFloat f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f $dRealFloat :: GHC.Float.RealFloat f eta :: f ->
                 let {
                   $dFloating :: GHC.Float.Floating f
                   = GHC.Float.$p2RealFloat @ f $dRealFloat
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 GHC.Real./
                   @ f
                   $dFractional
                   eta
                   (GHC.Real./
                      @ f
                      $dFractional
                      (GHC.Real.fromRational
                         @ f
                         $dFractional
                         Leibniz.Trigonometry.todeg1)
                      (GHC.Float.pi @ f $dFloating))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

