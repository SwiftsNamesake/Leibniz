
==================== FINAL INTERFACE ====================
2016-09-15 17:53:18.9031366 UTC

interface Leibn_4HbkS7GG3563vKXzubBV4Y:Leibniz.Trigonometry 7103
  interface hash: b1f0739f93e0836006639a748afe3788
  ABI hash: f29d2e96f4ecdd2078f97475a1dbf8d9
  export-list hash: 634a1e7ca8b240c9e9da0a0a86132aba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 69cb2e6f3d61a39f676617f7a948da3c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Leibniz.Trigonometry.todeg
  Leibniz.Trigonometry.torad
module dependencies: Leibniz.Constants
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  Leibniz.Constants c3eda7d6d261b91c634329c3ce56de12
  exports: 98098f3bea7ef6de66776abca2bb3ca3
  Ï€ 3350d24a572facf86425a151b1827778
import  -/  base-4.8.2.0:GHC.Float e532d434ec2447d809887c0fca1d78a5
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
19c6000507dc448f48c489a59280b680
  todeg :: GHC.Float.RealFloat f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f $dRealFloat :: GHC.Float.RealFloat f eta :: f ->
                 let {
                   $dFloating :: GHC.Float.Floating f
                   = GHC.Float.$p2RealFloat @ f $dRealFloat
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 GHC.Num.*
                   @ f
                   (GHC.Real.$p1Fractional @ f $dFractional)
                   eta
                   (GHC.Real./
                      @ f
                      $dFractional
                      (GHC.Real.fromRational
                         @ f
                         $dFractional
                         Leibniz.Trigonometry.todeg1)
                      (GHC.Float.pi @ f $dFloating))) -}
2a1986c466ee3c31802a4a4a3631e3bb
  todeg1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Leibniz.Trigonometry.todeg3
                   Leibniz.Trigonometry.todeg2) -}
cf5651d10ea58646f4989866b7a94b5e
  todeg2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 1) -}
92a572f93ec6e933afd4f70f29b0358d
  todeg3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 180) -}
854e77add84273ffcfd56a9ddeaf50ca
  torad :: GHC.Float.RealFloat f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: (\ @ f $dRealFloat :: GHC.Float.RealFloat f eta :: f ->
                 let {
                   $dFloating :: GHC.Float.Floating f
                   = GHC.Float.$p2RealFloat @ f $dRealFloat
                 } in
                 let {
                   $dFractional :: GHC.Real.Fractional f
                   = GHC.Float.$p1Floating @ f $dFloating
                 } in
                 GHC.Real./
                   @ f
                   $dFractional
                   eta
                   (GHC.Real./
                      @ f
                      $dFractional
                      (GHC.Real.fromRational
                         @ f
                         $dFractional
                         Leibniz.Trigonometry.todeg1)
                      (GHC.Float.pi @ f $dFloating))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

